name: Debian Packer Example

on:
  push:
    branches: '**'
  workflow_dispatch:

jobs:
  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Secrets
        run: |
          touch secrets.json
          echo { >> secrets.json
          echo "\"DJANGO_SECRET_KEY\": \"${{ secrets.DJANGO_SECRET_KEY }}\"," >> secrets.json
          echo "\"DB_ENGINE\": \"${{ secrets.DB_ENGINE }}\"," >> secrets.json
          echo "\"DB_NAME\": \"${{ secrets.DB_NAME }}\"," >> secrets.json
          echo "\"DB_USER\": \"${{ secrets.DB_USER }}\"," >> secrets.json
          echo "\"DB_PASSWORD\": \"${{ secrets.DB_PASSWORD }}\"," >> secrets.json
          echo "\"DB_HOST\": \"${{ secrets.DB_HOST }}\"," >> secrets.json
          echo "\"DB_PORT\": \"${{ secrets.DB_PORT }}\"," >> secrets.json
          echo "\"DB_SSLMODE\": \"${{ secrets.DB_SSLMODE }}\"," >> secrets.json
          echo "\"AWS_ACCESS_KEY_ID\": \"${{ secrets.AWS_ACCESS_KEY_ID }}\"," >> secrets.json
          echo "\"AWS_STATIC_LOCATION\": \"${{ secrets.AWS_STATIC_LOCATION }}\"," >> secrets.json
          echo "\"AWS_MEDIA_LOCATION\": \"${{ secrets.AWS_MEDIA_LOCATION }}\"," >> secrets.json
          echo "\"AWS_S3_ENDPOINT_URL\": \"${{ secrets.AWS_S3_ENDPOINT_URL }}\"," >> secrets.json
          echo "\"AWS_SECRET_ACCESS_KEY\": \"${{ secrets.AWS_SECRET_ACCESS_KEY }}\"," >> secrets.json
          echo "\"AWS_STORAGE_BUCKET_NAME\": \"${{ secrets.AWS_STORAGE_BUCKET_NAME }}\"" >> secrets.json
          echo } >> secrets.json

      - name: Run Tests
        run: |
          python manage.py test
          

  deployment:
    needs: tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
    - name: Deploy Stage
      id: request
      uses: fjogeleit/http-request-action@master
      with:
        url: 'https://update.swiss-scouting.ca/'
        method: 'GET'
        timeout: 60000
    - name: Show Response
      run: echo ${{ steps.request.outputs.response }}


  deb-control-file-build:
    name: Generate Debian Package
    needs: tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Generate Control File
        id: control-gen
        uses: Nightwind-Developments/debian-control-file-builder@latest
        with:
          config-file: 'debian/control.json'
          deps-file: 'debian/dependencies.txt'
          output-path: 'debian/input'

      - name: Prints Output File Path
        run: echo "${{ steps.control-gen.outputs.control_file_path }}"

      - name: Confirms Control File is Present
        run: ls ${{ steps.control-gen.outputs.control_file_path }}
        
      - name: Cat Control File
        run: cat ${{ steps.control-gen.outputs.control_file_path }}
        
      #- name: Copies control File to Intended Location (useful if Debian Control file is not in the default location)
      #  run: cp ${{ steps.control-gen.outputs.control_file_path }} examples/input_example

      - name: Prints Contents of debian
        run: ls -l ./debian
      - name: Prints Contents of debian/input
        run: ls -l ./debian/input

      - name: Build Docker Container & Run Debian Packer
        uses: Nightwind-Developments/debian-packer@latest
        id: container
        with:
          input_dir: 'debian/input'
          output_dir: 'debian'
          layout_map_file: 'debian/deb-map.json'
          package_name: 'SWISS'
          package_version: '1.0.0'
          package_arch: 'all'

      - name: Upload Generated Package File
        uses: actions/upload-artifact@v2
        with:
          name: swiss.deb
          path: "${{ steps.container.outputs.generated_package_path }}"
          if-no-files-found: error


  docker:
    name: Build and push Docker image
    needs: deb-control-file-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/swiss-scouting:latest
          build-args: |
            DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            DB_ENGINE=${{ secrets.DB_ENGINE }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_SSLMODE=${{ secrets.DB_SSLMODE }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_STATIC_LOCATION=${{ secrets.AWS_STATIC_LOCATION }}
            AWS_MEDIA_LOCATION=${{ secrets.AWS_MEDIA_LOCATION }}
            AWS_S3_ENDPOINT_URL=${{ secrets.AWS_S3_ENDPOINT_URL }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}
            
