# Generated by Django 4.0.8 on 2023-01-30 23:56

import apps.entry.models
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='NA')),
                ('FIRST_key', models.TextField(default='NA')),
                ('FIRST_district_key', models.TextField(default='NA')),
                ('FIRST_eventType', models.TextField(default='NA')),
                ('start', models.DateField(default=datetime.date(2020, 1, 1), validators=[django.core.validators.MaxValueValidator(datetime.date(2220, 12, 31)), django.core.validators.MinValueValidator(datetime.date(2020, 1, 1))])),
                ('end', models.DateField(default=datetime.date(2020, 1, 1), validators=[django.core.validators.MaxValueValidator(datetime.date(2220, 12, 31)), django.core.validators.MinValueValidator(datetime.date(2020, 1, 1))])),
                ('imported', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['start'],
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_number', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.MinValueValidator(-1)])),
                ('on_field', models.BooleanField(default=False)),
                ('preloaded_balls', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(0)])),
                ('auto_start_x', models.FloatField(default=0, validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(0)])),
                ('auto_start_y', models.FloatField(default=0, validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(0)])),
                ('auto_placement', models.IntegerField(default=0)),
                ('auto_route', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('auto_fouls', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(25), django.core.validators.MinValueValidator(0)])),
                ('auto_comment', models.TextField(default='')),
                ('auto_baseline', models.BooleanField(default=False)),
                ('placement', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('cycles', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('intake_type', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('under_defense', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('defended_by', models.IntegerField(blank=True, default=0, null=True)),
                ('offensive_fouls', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(25), django.core.validators.MinValueValidator(0)])),
                ('defense_played', models.BooleanField(default=False)),
                ('defense_time', models.IntegerField(default=0)),
                ('defense_rating', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('defense_fouls', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(250), django.core.validators.MinValueValidator(0)])),
                ('team_defended', models.IntegerField(blank=True, default=0, null=True)),
                ('able_to_push', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('endgame_time', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(165), django.core.validators.MinValueValidator(0)])),
                ('lock_status', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('endgame_action', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('endgame_attempts', models.IntegerField(default=0)),
                ('endgame_comments', models.TextField(default='')),
                ('fouls_hp', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('fouls_driver', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('yellow_card', models.BooleanField(default=False)),
                ('disabled', models.BooleanField(default=False)),
                ('yellow_card_description', models.TextField(default='')),
                ('scouter_name', models.TextField(default='')),
                ('comment', models.TextField(default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, to='entry.event')),
            ],
            options={
                'verbose_name_plural': 'Matches',
                'ordering': ['-match_number'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('reg_id', models.UUIDField(default=uuid.uuid4)),
            ],
            options={
                'verbose_name_plural': 'Organizations',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(9999), django.core.validators.MinValueValidator(0)])),
                ('name', models.CharField(default='team', max_length=100)),
                ('colour', models.CharField(default='#000000', max_length=7)),
                ('pick_status', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(2), django.core.validators.MinValueValidator(0)])),
                ('glance', models.FileField(blank=True, null=True, upload_to='json/')),
            ],
            options={
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_number', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.MinValueValidator(0)])),
                ('match_type', models.TextField(default='NA', max_length=40)),
                ('description', models.TextField(default='NA', max_length=100)),
                ('red1', models.IntegerField(default=0, verbose_name=apps.entry.models.Team)),
                ('red2', models.IntegerField(default=0, verbose_name=apps.entry.models.Team)),
                ('red3', models.IntegerField(default=0, verbose_name=apps.entry.models.Team)),
                ('blue1', models.IntegerField(default=0, verbose_name=apps.entry.models.Team)),
                ('blue2', models.IntegerField(default=0, verbose_name=apps.entry.models.Team)),
                ('blue3', models.IntegerField(default=0, verbose_name=apps.entry.models.Team)),
                ('red_score', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(9999), django.core.validators.MinValueValidator(0)])),
                ('blue_score', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(9999), django.core.validators.MinValueValidator(0)])),
                ('event', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, to='entry.event')),
            ],
            options={
                'verbose_name_plural': 'Schedule',
                'ordering': ['match_number'],
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False)),
                ('gouda', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(9999), django.core.validators.MinValueValidator(0)])),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entry.event')),
                ('match', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='entry.match')),
                ('ownership', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='entry.organization')),
                ('team', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='entry.team')),
            ],
        ),
        migrations.CreateModel(
            name='Pits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drivetrain_style', models.TextField(default='')),
                ('drivetrain_wheels', models.TextField(default='')),
                ('drivetrain_motortype', models.TextField(default='')),
                ('drivetrain_motorquantity', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)])),
                ('drivetrain_speed', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(20), django.core.validators.MinValueValidator(0)])),
                ('drivetrain_transmission', models.TextField(default='')),
                ('auto_route', models.BooleanField(default=False)),
                ('auto_description', models.TextField(default='')),
                ('auto_scoring', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(0)])),
                ('tele_scoring', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(0)])),
                ('tele_positions', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(4), django.core.validators.MinValueValidator(0)])),
                ('weight', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(200), django.core.validators.MinValueValidator(0)])),
                ('scouter_name', models.TextField(default='')),
                ('event', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, to='entry.event')),
                ('ownership', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='entry.organization')),
                ('team', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, to='entry.team')),
            ],
            options={
                'verbose_name_plural': 'Pits',
                'ordering': ['team'],
            },
        ),
        migrations.CreateModel(
            name='OrgSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allow_photos', models.BooleanField(default=True)),
                ('allow_schedule', models.BooleanField(default=True)),
                ('new_user_creation', models.CharField(choices=[('MA', 'Manual Approval, Open Registration'), ('MM', 'Manual Creation of All Users'), ('AA', 'Open Registration and Use')], default='MM', max_length=2)),
                ('new_user_position', models.CharField(choices=[('PA', 'Public Access'), ('OV', 'Only View'), ('MS', 'Match Scout'), ('PS', 'Pit Scout'), ('GS', 'General Scout'), ('DT', 'Drive Team'), ('LS', 'Lead Scout')], default='OV', max_length=2)),
                ('current_event', models.ForeignKey(default=0, on_delete=django.db.models.deletion.SET_DEFAULT, to='entry.event')),
            ],
            options={
                'verbose_name_plural': 'Organization Settings',
            },
        ),
        migrations.CreateModel(
            name='OrgMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tutorial_completed', models.BooleanField(default=False)),
                ('position', models.CharField(choices=[('PA', 'Public Access'), ('OV', 'Only View'), ('MS', 'Match Scout'), ('PS', 'Pit Scout'), ('GS', 'General Scout'), ('DT', 'Drive Team'), ('LS', 'Lead Scout'), ('NA', 'No Access')], default='GS', max_length=2)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entry.organization')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='organization',
            name='settings',
            field=models.OneToOneField(default=0, on_delete=django.db.models.deletion.CASCADE, to='entry.orgsettings'),
        ),
        migrations.AddField(
            model_name='organization',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entry.team'),
        ),
        migrations.AddField(
            model_name='match',
            name='ownership',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='entry.organization'),
        ),
        migrations.AddField(
            model_name='match',
            name='team',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, to='entry.team'),
        ),
        migrations.CreateModel(
            name='Images',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(default='/robots/default.jpg', upload_to='robots')),
                ('name', models.CharField(default='Wally', max_length=100)),
                ('ownership', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='entry.team')),
                ('team', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='entry.team')),
            ],
            options={
                'verbose_name_plural': 'Images',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qualification_rank', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(9999), django.core.validators.MinValueValidator(0)])),
                ('playoff_rank', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(9999), django.core.validators.MinValueValidator(0)])),
                ('event', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, to='entry.event')),
                ('team', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, to='entry.team')),
            ],
        ),
    ]
